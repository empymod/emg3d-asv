{"project": "emg3d", "project_url": "http://empymod.github.io", "show_commit_url": "http://github.com/empymod/emg3d/commit/", "hash_length": 8, "revision_to_hash": {"0": "72f12ab0b2439b610de52c3b4de7c8ce6200fa6a", "16": "3618cea4b2e3ad3009d59678f9ea9c9dfa0acb1c", "19": "7782f415f11f732cf0a2578835f281fab0835708", "20": "06268b79f6ba899b4dbd16f0975d2de0b5b40889", "21": "0dbd285b113835cad8d4fec2822cbf559b776857", "22": "10e61b75c4ec0777fb4d91904be6cb32434800e0", "23": "4eeee3366bea25801d51a4af43cae6b8e69f3ba3", "29": "6c90915f888679606c59ec01766fa1e450d6f034", "30": "f07d21513819cd1ef8c04e734e07b8591206932e", "31": "6e9ac78f56a3e2a8b73eb8cbb0f3cc2adbf250bc", "32": "b4b4ed1c56291cca08d4589e29e4c4286b0d39d9", "36": "5521ba3c0ff17ef65057d3bb5fda366de2bde575", "38": "6867dd4b4a5283c7fd9090abef5d640d9101d394", "39": "125d4101ff01f6bc2a67947ff98f43d5e0d4c4f7", "40": "d653640fae3fcf6d27728be0b3c81025713efafa", "42": "fe5ba1a82db2f253c7c45ff8bd351b3d96d69ead", "50": "54fef352d91bc2ac13290fdf936a7f0745997666", "51": "7993df157d2b1a470442584e13185c31b76db761", "52": "3d5f43f3fdba1754aaeb9ceaba8ebf250ebb9978", "53": "697760f62edec04a40fbd86e22955da18d12e1b9", "54": "148c44d887d293354b90ee771b829d449ded0387", "55": "da58946c7d1325b376f3cb0c7e624234e72ceb46", "56": "13b4888926d261d7050d20d6ae1b2562282e38d4", "57": "501624a050b78f6cb185a92333c6d60506e0d11e", "58": "414095605b4d888033281be327e99720ef239411", "59": "869d2236c9aeef94c7b0a112467040e135b1ad3f", "60": "eef25f71d9328ec651dd9e7d9de5b66656795fa9", "61": "dfa8bb1754b47a30fa3c5fbc38f44c655e3fb92e", "62": "ebd2c9d5463c90e12f58ece674d48b03876f72bb", "63": "66949e1f93efcac4884531606a7e465235c92b6d", "64": "482d8f88870ec32d2cc2714d2d7706f9b3f46e43", "65": "12c5aeb54f6019270f2a1e605e952d77decba015", "66": "86f91359c648dd4224488402df0a7db8ed91c2c4", "67": "5d491d002a8aaa56342bb7d04963fc20d2dcc9c2", "68": "2dca8b7e570bfb161826f4c48aa2ac9d86fc0a2b", "69": "8377455ff56f2bb7a91ce1644a2e136aeb0a7016", "70": "e9b5181b689846d2451bed5ad07ad5e2a1fe34a6", "71": "42a648dc48ad81153ec318fcb8857895568bc77c", "72": "cbccadabab75227b08e3f8089efe085c6606020e", "76": "56cb5010d777ef35dd25ecee4c215e98e2ac119d", "77": "69996c34203718b48a1d02b41efdc4541eea8e7b", "78": "36891f1728bd9950ca5b9d4038c1278d61e677b5", "79": "478ce2a12748843ca526f8c5a312769ebea382c6", "80": "2738dda90c8e50bc6626a0304cd7714b7f8b4203", "81": "4235b7290a24d5129985e8d7457a1eb7e7697238", "82": "2dbe393e611b442aa5827ff9b27cd5d58d37b74c", "83": "0a40d52e0bf9f4210414b1c464bd29aaba8bdfac", "84": "aae1a39f566f2fe924826f95adf1337109676255", "85": "85bd4a3e96106be0dccce9d5f0d98568b797ffca", "86": "d1ce5b5d00eb7d4567a9d5c1c1ca2b040a154f62", "87": "c4d6496acff270012fafe1d3b36bcc1ee99dc086", "88": "171ef12615a84c64baf936c5bd679e874437f5db", "89": "42da05bc21359843bdf7d21f353ed6890271999b", "90": "9ea5e8db02351f6a2f055fb509cd2a12fd8f3298", "91": "115965e80c539e872f4883bdc65a25ed96ada4e8", "93": "f8945c5baba94cadeffd84837c55818125c0bed2", "95": "3f1a54204b47185a2cc492576b9ebcaa4b0a6e2a", "97": "40f26ad94e5b32ce1b8d6e8f8c64f02ffce11017", "100": "de199732e0c0f37a9e6bcd3d084c1e532766d1d2", "103": "d470b243caefb90d6d03bc759ef5710f6f5a2b3d", "104": "44ba3e942b7ce6e6ca217e379c63f9da1a3fbfb9", "105": "98c021d6ad47034ff6332707ab75c1d104ad29ca", "106": "955b925e1fd9983beb44cc357aa61b14b86d3fef", "107": "73905098b923425144a780f4fdeb0499b875066f", "108": "c44dad5533b0190e81029b310e2adba0332a1bc3", "113": "88f73115b1c9b8682b4555ee43040a613cd7b21a", "117": "71f94f774e58fc553b398651f607a2a08225c0f6", "119": "36a93992ce39f5f6ff2b7d9e19d7d2b81cd254aa", "122": "d221fad34d7e4ba5f001265a67b5e1fc939f85df", "123": "05d13b2adea8fb9cf48fb6ec29b0cfad5479322f", "124": "8e82ce6189c256958e98b21bedb590d0cfcc896a", "126": "f57644a10525169c9e0f0f60d940132899ab5c01", "136": "3dfbf2af5f3c49358426bb462feb5aacdc411062", "138": "7580197086af6e23b39b710bf5e5cbfa5f7ea980", "139": "9b79b68577b42f62f891f4dac65de59c2a9f1f74", "140": "70ff785208661d7c75dde5b81519b8fe457741fa", "147": "6ead79a109dd51560df0bbe2704d985a084a7120", "151": "1cd62aaf46f98bfec27a8c794eaf3a46971e478d", "152": "13a08271948186ce50a977e5ef9b39c1630e52ac", "160": "57a0ee1207987961df7d4a1c4365e1fb129dbfce", "163": "bbc89a418a687c5d2e11c3607b0c179205c02d66", "164": "5ece4a4c56513aabf2e080ff61815d50e382341c", "165": "b5d50d7ec2927ee79fec7068f0e82b5f7444f1b2", "166": "a9080bb9c100e16b99c8e09a3aae4454c4f2c2c0", "167": "69b651f60d5e1da353ffeaebbfcce8d8cc0fec1f", "173": "02e152d14ec2c527a791e421ca492c7efdb6fcab", "174": "0ec2770037d4970a20f6e0132b8aa4ce844461ca", "175": "a5de17c2bd2d3bfcc7a599c8cd8203d2cca321a1", "176": "1d9b30314f48d8c5b65a5a9deb6105df8f54e119", "177": "65f2aa9338fd7a0d0bfb0ef7438c7bdfd9db2ba2", "178": "d255e2de67738d06e2105201ae93b194e460898d", "179": "f34dcb660b66558b462fca2476d5f020dd7b67a6", "181": "f03a5c808aba59477899a16174b93b2f2bf2bc71", "185": "894e3931385f5c07ef37cd8559f1fd1842898a75", "189": "555ea2fd93847f88792329b6121d5f43f2de008a", "195": "d9c22d526a914e8e8bacd1a221afd193dc59ea90", "202": "01820dad7411b9161a89e4bc33ef07ef4406bdff", "211": "9e87da812d5ee0cb2a2453cd7c21fc908a1bd3e2", "214": "8efe8800f3d4fff0aad0f6e7fbafe4dd9b2d9906", "220": "06d2c8955875928df56cb38cf7b422d14701423a", "222": "50cd14d24dc8c918ea5eda3b9af9a7f2fd7b3856", "223": "0069c4091c554b376d4d761d30808d76f43649f4", "224": "f771dcab5a0f3d6859cd312ad2807a6e5f59cf00", "232": "b4de17e974405d8842aa7167b46919f2f049a1c6", "233": "777abee0feee9d9bd66c350e43d26cb414b17ed5", "239": "b2c2b23e5b3e32285b1409c8331548b2e91f3f6d", "241": "1c68d5d635e40aa41e9c3a410c204f4cd17d7f9f", "247": "373a1aa8b569aaeb4ada70e73859834ac46bd704", "248": "761622929fe50de77e22f3fb730cab5f0da9ecb7", "249": "3f470f143cd5529b7032821456f9d60a4e8ca8ed", "254": "ae17baf5598ffa297d338f222b39f198c961dd39", "255": "bdbb96c28783deb80ed05b593a7bf2592280da64", "258": "57c684f520d29d7a2a42cbb1c78cf8a527ee1afd", "262": "ac67b3ee951a829e3ae33f87ef8c0cb5d2cb9151", "263": "d32da84b3964e16318019fe0cabac9b619b1d893", "266": "e74eb30633f19e656f1510b97ee69e0ca71ceb9d", "272": "0dd38e271616d4467408caeccc380ce273d75dda", "276": "4a34cc162e15771c5b9e582f8d36be90e851de1e", "277": "c7c186ad7edd393df46eb0f2993b53dfb41daced", "286": "0d949e183bdd4310191125374da41806f098ac86", "287": "294b8d43252439d379ae6dc856a8b1c9a6d62f2f", "295": "68bd6b0a4c771386e6da4a6e1ad5926ac824d084", "300": "d8e98c012a5389880f9347937b3c56e1d8a77961", "301": "41359490ffaa184a5a71815b7ee7e2499e8acdcf", "302": "df9766a921bd7ba9bd9aa9ee7787128a37045b05", "308": "0b9f9385ca8105690c2416b7fc077bc001176420", "310": "0b4f2f8900ff03da26854e489b4766e33dfe3a44", "312": "b7da105330b2714c01412741738728a723b33858", "317": "c1623962753f00191d2667f8e1f9799383b867bc", "319": "a98b1cdc217cf20825effc23da9f9e3f8c19231a", "325": "e43386e4e9b77fcacf05f51a97ec17d433e4934a", "327": "80318ab170b04d1d5e5e78e4cc80c1408b78233b", "331": "c9e595eb046cbe0cb4f80b44a58ad97d76db78e1", "351": "7ae48ec8b30493df4db4e2dbd93780cb9c6a1862", "355": "5d1a48512d4570fd9d8fcaf3f8d2e6e597596643", "358": "17ad9e8c6a4913d0fb0663b87d1d8ec3c02f160b", "363": "03bf47a689c2a794be10f493a27542e23a55fe95", "364": "b3748374fb62e3d638a0c1a240cf96a81cf02330", "371": "ec9be31ca9458772b1cd961084dedcddf04c5e4f", "377": "6ecfe15559504c06d92cf55679c6c5ef7b6151c7", "379": "5bf4617c956c37dfd19f46dc65d2f6abc1bda0f7", "398": "b28401fb5bc4bb8bbbed0145e91d7fe3e995d9c3", "405": "eaa69f04e13a5dcd0890c3f4ff037dc77b2c004a", "409": "985be811848e0e20305929bf40c933e2e7962550", "431": "8c31324bd6f23f6a8d90977cda63f6b000291f12", "434": "a6d4b00d86f2a7e3449e2dbde252d4e3baa963b0"}, "revision_to_date": {"0": 1555486509000, "16": 1555498203000, "19": 1556703968000, "20": 1556707717000, "21": 1556708215000, "22": 1556710304000, "23": 1556710585000, "29": 1556864802000, "30": 1556895118000, "31": 1556897500000, "32": 1558074574000, "36": 1558076207000, "38": 1558096687000, "39": 1558099924000, "40": 1558346255000, "42": 1558380800000, "50": 1558511031000, "51": 1558595374000, "52": 1558601451000, "53": 1558610947000, "54": 1558612223000, "55": 1558616235000, "56": 1558618968000, "57": 1558621435000, "58": 1558639056000, "59": 1558706713000, "60": 1558711447000, "61": 1558724958000, "62": 1558773987000, "63": 1558855123000, "64": 1558859184000, "65": 1558861785000, "66": 1558862915000, "67": 1558864509000, "68": 1559020979000, "69": 1559021220000, "70": 1559026671000, "71": 1559034472000, "72": 1559034743000, "76": 1559284532000, "77": 1559290996000, "78": 1559299031000, "79": 1559306863000, "80": 1559334272000, "81": 1559374675000, "82": 1559377492000, "83": 1559552379000, "84": 1559556620000, "85": 1559570931000, "86": 1559586783000, "87": 1559587266000, "88": 1559724649000, "89": 1559745330000, "90": 1559819921000, "91": 1559828919000, "93": 1559922563000, "95": 1560158328000, "97": 1560171744000, "100": 1560410774000, "103": 1560415231000, "104": 1560426573000, "105": 1560449094000, "106": 1561538632000, "107": 1561555864000, "108": 1561709858000, "113": 1561972198000, "117": 1562053611000, "119": 1562053872000, "122": 1562137613000, "123": 1562160438000, "124": 1562164638000, "126": 1562175668000, "136": 1562319435000, "138": 1562319486000, "139": 1562319990000, "140": 1562320265000, "147": 1562671540000, "151": 1562941332000, "152": 1563047705000, "160": 1563256106000, "163": 1563273537000, "164": 1563275073000, "165": 1563279292000, "166": 1563282192000, "167": 1563284550000, "173": 1563372475000, "174": 1563373106000, "175": 1563374365000, "176": 1563778590000, "177": 1563794892000, "178": 1564054020000, "179": 1564059847000, "181": 1564139599000, "185": 1564150065000, "189": 1566560000000, "195": 1567006111000, "202": 1568012840000, "211": 1568212866000, "214": 1568704747000, "220": 1570092159000, "222": 1570098304000, "223": 1570192615000, "224": 1570193604000, "232": 1571768362000, "233": 1571820690000, "239": 1572469897000, "241": 1572616435000, "247": 1572621924000, "248": 1572679506000, "249": 1572680426000, "254": 1572775688000, "255": 1572858355000, "258": 1572871642000, "262": 1572951163000, "263": 1572965824000, "266": 1573036624000, "272": 1573137229000, "276": 1573148895000, "277": 1573151190000, "286": 1573396281000, "287": 1573396599000, "295": 1573633055000, "300": 1573648475000, "301": 1573649974000, "302": 1573724861000, "308": 1575274474000, "310": 1575643656000, "312": 1575647285000, "317": 1576484219000, "319": 1576485501000, "325": 1577357075000, "327": 1577358011000, "331": 1577996034000, "351": 1578410542000, "355": 1578737891000, "358": 1580478630000, "363": 1581423995000, "364": 1581424307000, "371": 1583529630000, "377": 1583766720000, "379": 1583830763000, "398": 1585164733000, "405": 1587620434000, "409": 1588167330000, "431": 1588316559000, "434": 1588672126000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz"], "machine": ["dtr-latitude"], "os": ["Linux 4.18.0-20-generic"], "ram": ["16307368"], "python": ["3.7"], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz", "machine": "dtr-latitude", "os": "Linux 4.18.0-20-generic", "ram": "16307368", "python": "3.7", "branch": "master"}], "benchmarks": {"memory.ResidualMemory.peakmem_residual": {"code": "class ResidualMemory:\n    def peakmem_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        if BEFORE:\n            res = solver.residual(grid, model, sfield, sfield.field*0)\n            norm = np.linalg.norm(res)\n        else:  # After, norm is included in residual.\n            res, norm = solver.residual(grid, model, sfield, sfield.field*0)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            try:  # Needs VolumeModel from d8e98c0 onwards.\n                data[size]['model'] = utils.VolumeModel(grid, model, sfield)\n            except AttributeError:\n                data[size]['model'] = model\n        return data", "name": "memory.ResidualMemory.peakmem_residual", "param_names": ["size"], "params": [["'small'", "'big'"]], "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:158", "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e2274e14e498509f7245331c493f458523362edf067130589d46cb830a5c3d49"}, "memory.SmoothingMemory.peakmem_smoothing": {"code": "class SmoothingMemory:\n    def peakmem_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        efield = utils.Field(grid)\n        inp = (grid, model, sfield, efield, 2, lr_dir)\n        if BEFORE:\n            solver.smoothing(*inp)\n            res = solver.residual(grid, model, sfield, efield)\n            norm = np.linalg.norm(res)\n        else:  # After, residual is included in smoothing and norm in residual.\n            res, norm = solver.smoothing(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            try:  # Needs VolumeModel from d8e98c0 onwards.\n                data[size]['model'] = utils.VolumeModel(grid, model, sfield)\n            except AttributeError:\n                data[size]['model'] = model\n        return data", "name": "memory.SmoothingMemory.peakmem_smoothing", "param_names": ["lr_dir", "size"], "params": [["0", "1", "2", "3"], ["'small'", "'big'"]], "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:126", "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "fec2b6f9600f4af7771e124cab8402d346d9a10eac570833524186b64bd9df4a"}, "memory.SolverMemory.peakmem_solver": {"code": "class SolverMemory:\n    def peakmem_solver(self, data, sslsolver, anisotropy):\n        grid = data[anisotropy]['grid']\n        model = data[anisotropy]['model']\n        sfield = utils.Field(grid, data[anisotropy]['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle='F',\n              sslsolver=sslsolver,\n              semicoarsening=True,\n              linerelaxation=True,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        for anisotropy in self.params[1]:\n            data[anisotropy] = {}\n            grid, model, sfield = get_model('small', anisotropy)\n            data[anisotropy]['grid'] = grid\n            data[anisotropy]['model'] = model\n            data[anisotropy]['sfield'] = sfield\n        return data", "name": "memory.SolverMemory.peakmem_solver", "param_names": ["sslsolver", "anisotropy"], "params": [["True", "False"], ["'iso'", "'vti'", "'tri'"]], "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/memory.py:92", "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "9b78f85f55f2bd3c1c604175199a0979516d00e9a165b1659cf8cd98b38f8759"}, "time.ResidualTime.time_residual": {"code": "class ResidualTime:\n    def time_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        if BEFORE:\n            res = solver.residual(grid, model, sfield, sfield.field*0)\n            norm = np.linalg.norm(res)\n        else:  # After, norm is included in residual.\n            res, norm = solver.residual(grid, model, sfield, sfield.field*0)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            try:  # Needs VolumeModel from d8e98c0 onwards.\n                data[size]['model'] = utils.VolumeModel(grid, model, sfield)\n            except AttributeError:\n                data[size]['model'] = model\n    \n        return data", "min_run_count": 2, "name": "time.ResidualTime.time_residual", "number": 0, "param_names": ["size"], "params": [["'small'", "'big'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:221", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ef8926db276cc98e56a985bdc4bf9eb11f6c535693591c49271574670e2113c5", "warmup_time": -1}, "time.SmoothingTime.time_smoothing": {"code": "class SmoothingTime:\n    def time_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        sfield = utils.Field(grid, data[size]['sfield'])\n        efield = utils.Field(grid)\n        inp = (grid, model, sfield, efield, 2, lr_dir)\n        if BEFORE:\n            solver.smoothing(*inp)\n            res = solver.residual(grid, model, sfield, efield)\n            norm = np.linalg.norm(res)\n        else:  # After, residual is included in smoothing and norm in residual.\n            res, norm = solver.smoothing(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            try:  # Needs VolumeModel from d8e98c0 onwards.\n                data[size]['model'] = utils.VolumeModel(grid, model, sfield)\n            except AttributeError:\n                data[size]['model'] = model\n        return data", "min_run_count": 2, "name": "time.SmoothingTime.time_smoothing", "number": 0, "param_names": ["lr_dir", "size"], "params": [["0", "1", "2", "3"], ["'small'", "'big'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:189", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1c94b43ea2afc94cb7940993dc45f809bdeec653d652d3ecc9dbf17bf1b6238e", "warmup_time": -1}, "time.SolverTimeCycle.time_solver": {"code": "class SolverTimeCycle:\n    def time_solver(self, data, cycle):\n        grid = data['grid']\n        model = data['model']\n        sfield = utils.Field(grid, data['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle=cycle,\n              sslsolver=False,\n              semicoarsening=True,\n              linerelaxation=True,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data", "min_run_count": 2, "name": "time.SolverTimeCycle.time_solver", "number": 0, "param_names": ["cycle"], "params": [["'V'", "'W'", "'F'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:157", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d3426dd1e7519fe92c1794ede7ce43303f55ec68c2347ee00847ac33505467e9", "warmup_time": -1}, "time.SolverTimeMG.time_solver": {"code": "class SolverTimeMG:\n    def time_solver(self, data, semicoarsening, linerelaxation):\n        grid = data['grid']\n        model = data['model']\n        sfield = utils.Field(grid, data['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle='F',\n              sslsolver=False,\n              semicoarsening=semicoarsening,\n              linerelaxation=linerelaxation,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data", "min_run_count": 2, "name": "time.SolverTimeMG.time_solver", "number": 0, "param_names": ["semicoarsening", "linerelaxation"], "params": [["True", "False"], ["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:125", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "525e9ab309c2fc1b081df4af133ce4eb0c41309323ebff8232c8d4d74d23b6ed", "warmup_time": -1}, "time.SolverTimeSSL.time_solver": {"code": "class SolverTimeSSL:\n    def time_solver(self, data, sslsolver):\n        grid = data['grid']\n        model = data['model']\n        sfield = utils.Field(grid, data['sfield'])\n        solve(grid=grid,\n              model=model,\n              sfield=sfield,\n              cycle='F',\n              sslsolver=sslsolver,\n              semicoarsening=True,\n              linerelaxation=True,\n              verb=VERB)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data", "min_run_count": 2, "name": "time.SolverTimeSSL.time_solver", "number": 0, "param_names": ["sslsolver"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emg3d-asv/benchmarks/time.py:92", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "94e5a0bca73b22044ceddaa75bd7b3ed54dd3bd207f18fe710719431099b9e07", "warmup_time": -1}}, "machines": {"dtr-latitude": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz", "machine": "dtr-latitude", "os": "Linux 4.18.0-20-generic", "ram": "16307368", "version": 1}}, "tags": {"v0.10.0": 398, "v0.10.1": 409, "v0.11.0": 434, "v0.5.0": 20, "v0.6.0": 65, "v0.6.1": 71, "v0.6.2": 86, "v0.7.0": 139, "v0.7.1": 174, "v0.8.0": 223, "v0.8.1": 232, "v0.9.0": 277, "v0.9.1": 301, "v0.9.2": 327, "v0.9.3": 364}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}